// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: score_info.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ScoreInfo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ScoreInfoRoot

@implementation ScoreInfoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ScoreInfoRoot_FileDescriptor

static GPBFileDescriptor *ScoreInfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"score_server"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - base_score_info_t

@implementation base_score_info_t

@dynamic hasWinCount, winCount;
@dynamic hasLoseCount, loseCount;
@dynamic hasExceptionCount, exceptionCount;
@dynamic hasKillCount, killCount;
@dynamic hasDeathCount, deathCount;
@dynamic hasAssistCount, assistCount;
@dynamic hasRating, rating;

typedef struct base_score_info_t__storage_ {
  uint32_t _has_storage_[1];
  int32_t winCount;
  int32_t loseCount;
  int32_t exceptionCount;
  int32_t killCount;
  int32_t deathCount;
  int32_t assistCount;
  int64_t rating;
} base_score_info_t__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "winCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_WinCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, winCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "loseCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_LoseCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, loseCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "exceptionCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_ExceptionCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, exceptionCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "killCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_KillCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, killCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "deathCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_DeathCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, deathCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "assistCount",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_AssistCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, assistCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rating",
        .dataTypeSpecific.className = NULL,
        .number = base_score_info_t_FieldNumber_Rating,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(base_score_info_t__storage_, rating),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[base_score_info_t class]
                                     rootClass:[ScoreInfoRoot class]
                                          file:ScoreInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(base_score_info_t__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
